import { ListView, ComboBox, LineEdit, Button } from "sixtyfps_widgets.60";

export struct TransactionView := {
    id: int,
    timestamp: string,
    account: string,
    payee: string,
    category: string,
    memo: string,
    amount: float,
}

TableCell := Rectangle {
    property<string> text;

    Text {
        preferred-width: 0;
        width: parent.width - 12px;
        x: 12px;
        vertical-alignment: center;
        height: 100%;
        text: root.text;
        overflow: elide;
    }
}

export Transactions := Rectangle {
    property<[TransactionView]> transactions: [];
    property<bool> account-selected: false;
    property<[string]> account-names: [];
    property<[string]> categories: [];

    callback add-tx(string, string, string, string, float);

    min-width: 60px;
    min-height: 60px;
    vertical-stretch: 1;

    VerticalLayout {
        padding: 12px;
        
        HorizontalLayout {
            spacing: 4px;
            Text {
                text: "Account:";
                vertical-alignment: TextVerticalAlignment.center;
            }
            account := ComboBox {
                model: account-names;    
            }
            payee := LineEdit {
                placeholder-text: "Payee";
            }
            Text {
                text: "Category:";
                vertical-alignment: TextVerticalAlignment.center;
            }
            category := ComboBox {
                model: categories;    
            }
            memo := LineEdit {
                placeholder-text: "Memo";
            }
            outflow := LineEdit {
                placeholder-text: "Outflow";
            }
            inflow := LineEdit {
                placeholder-text: "Inflow";
            }
        }
        HorizontalLayout {
            alignment: center;
            Button {
                text: "Add transaction";
                clicked => {
                    root.add-tx(
                        account.current-value,
                        payee.text,
                        category.current-value,
                        memo.text,
                        (inflow.text.to-float() - outflow.text.to-float()) * 100);
                    account.current-value = "";
                    payee.text = "";
                    category.current-value = "";
                    memo.text = "";
                    outflow.text = "";
                    inflow.text = "";
                }
            }
        }

        table := Rectangle {
            Rectangle {
                height: 30px;
                width: list-view.visible-width;
                HorizontalLayout {
                    TableCell {
                        text: "Date";
                    }
                    if !account-selected: TableCell {
                        text: "Account";
                    }
                    TableCell {
                        text: "Payee";
                    }
                    TableCell {
                        text: "Category";
                    }
                    TableCell {
                        text: "Memo";
                    }
                    TableCell {
                        text: "Outflow";
                    }
                    TableCell {
                        text: "Inflow";
                    }
                }
            }

            list-view := ListView {
                y: 30px;
                height: parent.height - 30px;
                for data[index] in transactions : Rectangle {
                    height: 30px;
                
                    if (mod(index, 2) == 0): Rectangle {
                        background: #eee;
                        width: 100%;
                        height: 100%;
                    }
                    if (mod(index, 2) == 1): Rectangle {
                        background: #fff;
                        width: 100%;
                        height: 100%;
                    }

                    HorizontalLayout {
                        TableCell {
                            text: data.timestamp;
                        }
                        if !account-selected: TableCell {
                            text: data.account;
                        }
                        TableCell {
                            text: data.payee;
                        }
                        TableCell {
                            text: data.category;
                        }
                        TableCell {
                            text: data.memo;
                        }
                        if (data.amount <= 0): TableCell {
                            text: -data.amount;
                        }
                        if (data.amount <= 0): TableCell {
                            text: "";
                        }
                        if (data.amount > 0): TableCell {
                            text: "";
                        }
                        if (data.amount > 0): TableCell {
                            text: data.amount;
                        }
                    }
                }
            }
        }
    }
}
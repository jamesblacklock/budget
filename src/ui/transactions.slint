import { ListView, ComboBox, LineEdit, Button, CheckBox } from "std-widgets.slint";
import { Table, TableRow, TableCell } from "table.slint";

export struct TransactionView := {
    id: int,
    timestamp: string,
    account: string,
    payee: string,
    category: string,
    memo: string,
    amount: float,
    cleared: bool,
}

export Transactions := Rectangle {
    property<[TransactionView]> transactions: [];
    property<int> selected-account: -1;
    property<[string]> account-names: [];
    property<[string]> categories: [];

    callback select-account(int);
    callback add-tx(string, string, string, string, float);

    select-account(account-id) => {
        table.viewport-y = 0;
        selected-account = account-id;
    }

    min-width: 60px;
    min-height: 60px;
    vertical-stretch: 1;

    VerticalLayout {
        padding: 12px;
        
        HorizontalLayout {
            spacing: 4px;
            Text {
                text: "Account:";
                vertical-alignment: TextVerticalAlignment.center;
            }
            account := ComboBox {
                model: account-names;    
            }
            payee := LineEdit {
                placeholder-text: "Payee";
            }
            Text {
                text: "Category:";
                vertical-alignment: TextVerticalAlignment.center;
            }
            category := ComboBox {
                model: categories;    
            }
            memo := LineEdit {
                placeholder-text: "Memo";
            }
            outflow := LineEdit {
                placeholder-text: "Outflow";
            }
            inflow := LineEdit {
                placeholder-text: "Inflow";
            }
        }
        HorizontalLayout {
            alignment: center;
            Button {
                text: "Add transaction";
                clicked => {
                    root.add-tx(
                        account.current-value,
                        payee.text,
                        category.current-value,
                        memo.text,
                        (inflow.text.to-float() - outflow.text.to-float()) * 100);
                    account.current-value = "";
                    payee.text = "";
                    category.current-value = "";
                    memo.text = "";
                    outflow.text = "";
                    inflow.text = "";
                }
            }
        }

        table := Table {
            column-names: { 
                if (selected-account < 0) {
                    ["Date", "Account", "Payee", "Category", "Memo", "Outflow", "Inflow", "Cleared"]
                } else {
                    ["Date", "Payee", "Category", "Memo", "Outflow", "Inflow", "Cleared"]
                }
            }
            column-widths: { 
                if (selected-account < 0) {
                    [5, 5, 5, 5, 5, 5, 5, 1]
                } else {
                    [5, 5, 5, 5, 5, 5, 1]
                }
            }
            row-count: transactions.length;
            for data[index] in transactions: TableRow {
                n: index;
                TableCell {
                    text: data.timestamp;
                    horizontal-stretch: 5;
                }
                if selected-account < 0: TableCell {
                    text: data.account;
                    horizontal-stretch: 5;
                }
                TableCell {
                    text: data.payee;
                    horizontal-stretch: 5;
                }
                TableCell {
                    text: data.category;
                    horizontal-stretch: 5;
                }
                TableCell {
                    text: data.memo;
                    horizontal-stretch: 5;
                }
                if (data.amount <= 0): TableCell {
                    text: "$\{floor(-data.amount)}.\{mod(floor(-data.amount*10), 10)}\{mod(round(-data.amount*100), 10)}";
                    horizontal-alignment: right;
                    horizontal-stretch: 5;
                }
                TableCell {
                    text: "";
                    horizontal-stretch: 5;
                }
                if (data.amount > 0): TableCell {
                    text: "$\{floor(data.amount)}.\{mod(floor(data.amount*10), 10)}\{mod(round(data.amount*100), 10)}";
                    horizontal-alignment: right;
                    horizontal-stretch: 5;
                }
                TableCell {
                    horizontal-stretch: 1;
                    text: data.cleared ? "Y" : "N";
                }
            }
        }
    }
}
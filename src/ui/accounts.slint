import { ListView, Button, StandardButton, LineEdit, CheckBox } from "std-widgets.slint";
import { SidebarButton } from "./sidebar.slint";

export struct AccountView := {
    name: string,
    balance: float,
    id: int,
}

ModalDialog := Rectangle {
    property<string> title;
    property<string> ok-text: "Ok";
    property<string> cancel-text: "Cancel";

    property<bool> modal-active: false;

    callback show();
    callback hide();
    callback ok-clicked();

    show => {
        modal-active = true;
    }

    hide => {
        modal-active = false;
    }

    x: 0; y: 0; z: 999;
    background: #00000088;

    TouchArea {
        visible: modal-active;
    }

    dialog := HorizontalLayout {
        visible: root.opacity > 0;
        alignment: center;
        VerticalLayout {
            alignment: center;
            Rectangle {
                x: -20px;
                background: #eee;
                border-radius: 0.5cm;

                VerticalLayout {
                    padding: 16px;
                    spacing: 16px;
                    Text {
                        font-size: 16px;
                        text: title;
                    }
                    
                    Rectangle {
                        @children
                    }

                    HorizontalLayout {
                        alignment: end;
                        Button {
                            text: cancel-text;
                            clicked => {
                                modal-active = false;
                            }
                        }
                        Button {
                            text: ok-text;
                            clicked => {
                                modal-active = false;
                                root.ok-clicked();
                            }
                        }
                    }
                }
            }
        }
    }

    states [
        active when modal-active: {
            opacity: 1;
            dialog.y: 0;
        }
        inactive when !modal-active: {
            opacity: 0;
            dialog.y: -self.height / 4;
        }
    ]

    transitions [
        in active: {
            animate opacity, dialog.y { duration: 200ms; easing: ease; }
        }
        out active: {
            animate opacity, dialog.y { duration: 200ms; easing: ease; }
        }
    ]
}

export AccountDialog := ModalDialog {
    callback add-account(string, float, bool);
    
    title: "Add Account";
    ok-text: "Add Account";
    VerticalLayout {
        spacing: 6px;
        new-account-name := LineEdit {
            placeholder-text: "Account Name";
            width: 400px;
        }
        new-account-balance := LineEdit {
            placeholder-text: "Account Balance";
            width: 400px;
        }
        is-tracking-account := CheckBox {
            horizontal-stretch: 0;
            text: "Tracking";
            checked: false;
        }
    }
    
    ok-clicked => {
        root.add-account(
            new-account-name.text,
            new-account-balance.text.to-float() * 100,
            is-tracking-account.checked);
        new-account-name.text = "";
        new-account-balance.text = "";
        is-tracking-account.checked = false;
    }
}

export Accounts := VerticalLayout {
    property<[AccountView]> accounts: [];
    property<int> selected-account: -1;

    callback account-selected(int);
    callback add-account-button-clicked();

    spacing: 8px;

    ListView {
        for account in accounts: Rectangle {
            SidebarButton {
                active: root.selected-account == account.id;
                HorizontalLayout {
                    padding: 6px;
                    Text {
                        horizontal-stretch: 0;
                        preferred-width: parent.width * 0.8333;
                        text: account.name;
                        overflow: elide;
                        color: white;
                    }
                    Text {
                        horizontal-stretch: 1;
                        horizontal-alignment: right;
                        text: "\{(account.balance < 0 ? "-$" : "$")}\{floor(abs(account.balance))}.\{mod(floor(abs(account.balance)*10), 10)}\{mod(round(abs(account.balance)*100), 10)}";
                        color: white;
                    }
                }

                clicked => {
                    root.account-selected(account.id);
                }
            }
        }
    }

    HorizontalLayout {
        alignment: center;
        SidebarButton {
            text: "Add Account";
            horizontal-alignment: center;
            width: 120px;
            clicked => { root.add-account-button-clicked(); }
        }
    }
}